name: Impact Analysis

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'context-repo/contexts/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze-impact:
    name: Analyze Impact of Changes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to detect changes
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: context-repo/package.json
      
      - name: Install dependencies
        run: |
          cd context-repo
          npm install
      
      - name: Build dependency graph
        run: |
          cd context-repo
          node .context/pipelines/build-graph.mjs > graph.json
      
      - name: Detect changed files
        id: changes
        run: |
          cd context-repo
          
          # Get changed YAML files in this PR
          git diff --name-only origin/${{ github.base_ref }}...HEAD | \
            grep -E '^contexts/.*\.(yaml|yml)$' > changed-files.txt || true
          
          if [ ! -s changed-files.txt ]; then
            echo "No context files changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Extract entity IDs from changed files
          changed_ids=""
          while read file; do
            # Extract ID from filename (e.g., FEAT-001-name.yaml -> FEAT-001)
            id=$(basename "$file" | sed -E 's/^([A-Z]+-[0-9]+).*\.ya?ml$/\1/')
            if [ ! -z "$id" ]; then
              changed_ids="$changed_ids $id"
            fi
          done < changed-files.txt
          
          echo "Changed entity IDs: $changed_ids"
          echo "changed_ids=$changed_ids" >> $GITHUB_OUTPUT
      
      - name: Run impact analysis
        id: impact
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          cd context-repo
          
          # Run impact analysis for changed entities
          node .context/pipelines/impact.mjs ${{ steps.changes.outputs.changed_ids }} > impact-report.json || true
          
          if [ ! -f impact-report.json ]; then
            echo '{"issues": [], "stale": []}' > impact-report.json
          fi
          
          # Parse impact report
          STALE_COUNT=$(jq '.stale | length' impact-report.json)
          ISSUE_COUNT=$(jq '.issues | length' impact-report.json)
          
          echo "stale_count=$STALE_COUNT" >> $GITHUB_OUTPUT
          echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          
          # Generate markdown report
          cat > impact-comment.md << 'EOF'
          ## üîç Impact Analysis Report
          
          **Changed Entities:** ${{ steps.changes.outputs.changed_ids }}
          
          ### Summary
          - **Stale Items:** ${STALE_COUNT}
          - **Issues Found:** ${ISSUE_COUNT}
          
          EOF
          
          if [ $STALE_COUNT -gt 0 ]; then
            echo "### ‚ö†Ô∏è Stale Items" >> impact-comment.md
            echo "" >> impact-comment.md
            echo "The following items may need review due to changes:" >> impact-comment.md
            echo "" >> impact-comment.md
            jq -r '.stale[] | "- `" + . + "`"' impact-report.json >> impact-comment.md
            echo "" >> impact-comment.md
          fi
          
          if [ $ISSUE_COUNT -gt 0 ]; then
            echo "### ‚ùå Issues Detected" >> impact-comment.md
            echo "" >> impact-comment.md
            jq -r '.issues[] | "- **" + .id + "**: " + .message' impact-report.json >> impact-comment.md
            echo "" >> impact-comment.md
          fi
          
          if [ $STALE_COUNT -eq 0 ] && [ $ISSUE_COUNT -eq 0 ]; then
            echo "### ‚úÖ No Impact Detected" >> impact-comment.md
            echo "" >> impact-comment.md
            echo "Changes appear to be isolated with no downstream effects." >> impact-comment.md
          fi
          
          echo "" >> impact-comment.md
          echo "---" >> impact-comment.md
          echo "*Generated by Context-Sync Impact Analysis*" >> impact-comment.md
      
      - name: Upload impact report
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: impact-report
          path: |
            context-repo/impact-report.json
            context-repo/impact-comment.md
          retention-days: 30
      
      - name: Comment on PR
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the markdown comment
            const commentPath = path.join(process.cwd(), 'context-repo', 'impact-comment.md');
            const comment = fs.readFileSync(commentPath, 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(c => 
              c.user.type === 'Bot' && 
              c.body.includes('Impact Analysis Report')
            );
            
            // Create or update comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('Created new comment');
            }
      
      - name: Check for blocking issues
        if: steps.changes.outputs.has_changes == 'true' && steps.impact.outputs.issue_count != '0'
        run: |
          echo "::warning::Impact analysis found ${{ steps.impact.outputs.issue_count }} issues"
          echo "Review the impact report before merging"
          
          # Optionally fail the check if there are critical issues
          # Uncomment the line below to block PRs with issues
          # exit 1

  consistency-check:
    name: Check Consistency Rules
    runs-on: ubuntu-latest
    needs: analyze-impact
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: context-repo/package.json
      
      - name: Install dependencies
        run: |
          cd context-repo
          npm install
      
      - name: Check consistency rules
        run: |
          cd context-repo
          
          # Check if consistency rules file exists
          if [ ! -f .context/rules/consistency.rules.yaml ]; then
            echo "‚ö†Ô∏è No consistency rules defined"
            exit 0
          fi
          
          echo "‚úÖ Consistency rules file exists"
          echo "Note: Consistency rule engine not yet implemented"
          echo "This is a placeholder for future consistency validation"
