name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  discussions: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ -f CHANGELOG.md ]; then
            # Extract changelog section for this version
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release-notes.md
            if [ ! -s release-notes.md ]; then
              echo "No changelog entry found for version $VERSION, using placeholder"
              echo "Release $VERSION" > release-notes.md
            fi
          else
            echo "Release $VERSION" > release-notes.md
          fi
          cat release-notes.md
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Context-Sync v${{ steps.get_version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.19.0
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Build and package
        run: |
          cd app
          pnpm run make
        env:
          NODE_ENV: production
      
      - name: List output files
        run: |
          Get-ChildItem -Path app\out\make -Recurse -File
      
      - name: Upload Windows Squirrel installer
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            app/out/make/squirrel.windows/**/*.exe
            app/out/make/squirrel.windows/**/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.19.0
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Build and package
        run: |
          cd app
          pnpm run make
        env:
          NODE_ENV: production
      
      - name: List output files
        run: |
          find app/out/make -type f
      
      - name: Upload macOS ZIP
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            app/out/make/zip/darwin/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.19.0
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
      
      - name: Build and package
        run: |
          cd app
          pnpm run make
        env:
          NODE_ENV: production
      
      - name: List output files
        run: |
          find app/out/make -type f
      
      - name: Upload Linux packages
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            app/out/make/deb/**/*.deb
            app/out/make/rpm/**/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-release:
    name: Validate Release Assets
    needs: [create-release, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
      - name: Check release assets
        run: |
          echo "âœ… Release v${{ needs.create-release.outputs.version }} created successfully"
          echo "All platform builds completed"
