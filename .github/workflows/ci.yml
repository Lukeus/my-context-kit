name: CI Pipeline

permissions:
  contents: read
  pull-requests: write
  checks: write

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.19.0'

jobs:
  # Quick validation job that fails fast
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has_app_changes: ${{ steps.filter.outputs.app }}
      has_context_changes: ${{ steps.filter.outputs.context }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            app:
              - 'app/**'
              - 'package.json'
            context:
              - 'context-repo/**'
      
      - name: Validate commit message
        if: github.event_name == 'pull_request'
        run: |
          echo "PR Title: ${{ github.event.pull_request.title }}"
          # Check for conventional commit format
          if ! echo "${{ github.event.pull_request.title }}" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+'; then
            echo "‚ö†Ô∏è Warning: PR title doesn't follow conventional commit format"
            echo "Recommended format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
          fi

  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.has_app_changes == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Run ESLint
        run: |
          cd app
          pnpm lint

  # Type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.has_app_changes == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Run TypeScript compiler
        run: |
          cd app
          pnpm typecheck

  # Unit tests
  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    needs: pre-checks
    if: needs.pre-checks.outputs.has_app_changes == 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Run unit tests
        run: |
          cd app
          pnpm test
      
      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          files: ./app/coverage/coverage-final.json
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false

  # E2E tests - Temporarily disabled until packaging is optimized for CI
  # test-e2e:
  #   name: E2E Tests
  #   runs-on: ${{ matrix.os }}
  #   needs: pre-checks
  #   if: needs.pre-checks.outputs.has_app_changes == 'true'
  #   timeout-minutes: 30
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #   
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: ${{ env.PNPM_VERSION }}
  #     
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v6
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'pnpm'
  #         cache-dependency-path: app/pnpm-lock.yaml
  #     
  #     - name: Install dependencies
  #       run: |
  #         cd app
  #         pnpm install --frozen-lockfile
  #     
  #     - name: Install Playwright
  #       run: |
  #         cd app
  #         npx playwright install --with-deps
  #     
  #     - name: Run E2E tests
  #       run: |
  #         cd app
  #         pnpm test:e2e
  #     
  #     - name: Upload Playwright report
  #       if: always()
  #       uses: actions/upload-artifact@v5
  #       with:
  #         name: playwright-report-${{ matrix.os }}
  #         path: app/playwright-report/
  #         retention-days: 30

  # Build verification
  build:
    name: Build & Package
    runs-on: ${{ matrix.os }}
    needs: [lint, typecheck, test-unit]
    if: needs.pre-checks.outputs.has_app_changes == 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Build application
        run: |
          cd app
          pnpm build
        env:
          NODE_ENV: production
      
      - name: Package application
        run: |
          cd app
          pnpm make
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: build-${{ matrix.os }}
          path: |
            app/out/make/**/*
          retention-days: 7

  # Bundle size analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.has_app_changes == 'true' && github.event_name == 'pull_request'
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Build with bundle analysis
        run: |
          cd app
          pnpm build
        env:
          ANALYZE: 'true'
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v5
        with:
          name: bundle-analysis
          path: app/stats.html
          retention-days: 30

  # Final status check
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [pre-checks, lint, typecheck, test-unit, build]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          # Check if any required job failed
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.typecheck.result }}" == "failure" ]] || \
             [[ "${{ needs.test-unit.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå CI pipeline failed"
            exit 1
          fi
          
          echo "‚úÖ All CI checks passed successfully"
      
      - name: Post success notification
        if: success() && github.event_name == 'pull_request'
        run: |
          echo "üéâ CI pipeline completed successfully!"
          echo "PR #${{ github.event.pull_request.number }} is ready for review"
