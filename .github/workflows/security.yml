name: Security Scanning

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.19.0'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Run pnpm audit
        id: pnpm_audit
        run: |
          cd app
          pnpm audit --json > ../audit-report.json || true
          
          # Check severity levels
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' ../audit-report.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' ../audit-report.json)
          
          echo "high_vulnerabilities=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "critical_vulnerabilities=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $CRITICAL_VULNS critical and $HIGH_VULNS high severity vulnerabilities"
            exit 1
          fi
        continue-on-error: true
      
      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: dependency-audit-report
          path: audit-report.json
          retention-days: 90
      
      - name: Check for outdated packages
        run: |
          cd app
          pnpm outdated || true
      
      - name: Comment on PR with audit results
        if: github.event_name == 'pull_request' && (steps.pnpm_audit.outputs.high_vulnerabilities != '0' || steps.pnpm_audit.outputs.critical_vulnerabilities != '0')
        uses: actions/github-script@v7
        with:
          script: |
            const high = '${{ steps.pnpm_audit.outputs.high_vulnerabilities }}';
            const critical = '${{ steps.pnpm_audit.outputs.critical_vulnerabilities }}';
            
            const comment = `## üîí Security Audit Results
            
            **Vulnerabilities Found:**
            - Critical: ${critical}
            - High: ${high}
            
            Please review the [audit report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) and update dependencies before merging.
            
            Run \`pnpm audit --fix\` to automatically fix vulnerabilities where possible.`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  sast-codeql:
    name: SAST - CodeQL Analysis
    # Note: This runs in addition to GitHub's default CodeQL for comprehensive coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  sast-semgrep:
    name: SAST - Semgrep Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/nodejs
          generateSarif: true
        continue-on-error: true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always() && hashFiles('semgrep.sarif') != ''

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd app
          pnpm install --frozen-lockfile
      
      - name: Check licenses
        run: |
          cd app
          npx license-checker --json --out ../licenses.json
          
          # Check for restricted licenses
          if npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages; then
            echo "‚úÖ All licenses are compliant"
          else
            echo "‚ö†Ô∏è Some packages have non-compliant licenses"
            exit 1
          fi
      
      - name: Upload license report
        uses: actions/upload-artifact@v5
        with:
          name: license-report
          path: licenses.json
          retention-days: 90

  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: app/pnpm-lock.yaml
      
      - name: Build application
        run: |
          cd app
          pnpm install --frozen-lockfile
          pnpm build
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './app'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  security-scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Run analysis
        uses: ossf/scorecard-action@v2
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
      
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-semgrep, license-compliance]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Check all scans
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secret-scan.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST CodeQL | GitHub Default Setup (Enabled in Settings) |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Semgrep | ${{ needs.sast-semgrep.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any critical scan failed
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Critical security issues detected!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All security scans passed" >> $GITHUB_STEP_SUMMARY
